// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`createIntlProvider intl config from props should have higher priority than intl config from IWindIntlPublic 1`] = `
<IntlProvider
  baseComponentKeyPrefix="@wind_v2.base"
  locale="locale-from-props"
  messages={
    Object {
      "fromProps": "message from props",
    }
  }
>
  <Provider
    extend={[Function]}
    locale="locale-from-props"
    messages={
      Object {
        "fromProps": "message from props",
      }
    }
  >
    <ConfigProvider
      errorBoundary={false}
      locale={
        Object {
          "momentLocale": "locale-from-props",
        }
      }
      warning={true}
    >
      <TestConsumer
        intl={[Function]}
        locale="locale-from-props"
        messages={
          Object {
            "fromProps": "message from props",
          }
        }
        rawMessages={
          Object {
            "fromProps": "message from props",
          }
        }
      />
    </ConfigProvider>
  </Provider>
</IntlProvider>
`;

exports[`createIntlProvider should get intl config from IWindIntlPublic if it's not in props 1`] = `
<IntlProvider
  baseComponentKeyPrefix="@wind_v2.base"
>
  <Provider
    extend={[Function]}
    locale="locale-from-intlInstance"
    messages={
      Object {
        "fromIntlInstance": "message from intlInstance",
      }
    }
  >
    <ConfigProvider
      errorBoundary={false}
      locale={
        Object {
          "momentLocale": "locale-from-intlInstance",
        }
      }
      warning={true}
    >
      <TestConsumer
        intl={[Function]}
        locale="locale-from-intlInstance"
        messages={
          Object {
            "fromIntlInstance": "message from intlInstance",
          }
        }
        rawMessages={
          Object {
            "fromIntlInstance": "message from intlInstance",
          }
        }
      />
    </ConfigProvider>
  </Provider>
</IntlProvider>
`;

exports[`createIntlProvider should provide flat rawMessages and nested messages 1`] = `
<IntlProvider
  baseComponentKeyPrefix="@wind_v2.base"
  locale="locale-from-props"
  messages={
    Object {
      "a.b.c.d": "nested message from props 1",
      "a.b.e": "nested message from props 2",
      "b.c.e": "nested message from props 3",
      "flat": "flat message from props",
    }
  }
>
  <Provider
    extend={[Function]}
    locale="locale-from-props"
    messages={
      Object {
        "a": Object {
          "b": Object {
            "c": Object {
              "d": "nested message from props 1",
            },
            "e": "nested message from props 2",
          },
        },
        "b": Object {
          "c": Object {
            "e": "nested message from props 3",
          },
        },
        "flat": "flat message from props",
      }
    }
  >
    <ConfigProvider
      errorBoundary={false}
      locale={
        Object {
          "momentLocale": "locale-from-props",
        }
      }
      warning={true}
    >
      <TestConsumer
        intl={[Function]}
        locale="locale-from-props"
        messages={
          Object {
            "a": Object {
              "b": Object {
                "c": Object {
                  "d": "nested message from props 1",
                },
                "e": "nested message from props 2",
              },
            },
            "b": Object {
              "c": Object {
                "e": "nested message from props 3",
              },
            },
            "flat": "flat message from props",
          }
        }
        rawMessages={
          Object {
            "a.b.c.d": "nested message from props 1",
            "a.b.e": "nested message from props 2",
            "b.c.e": "nested message from props 3",
            "flat": "flat message from props",
          }
        }
      />
    </ConfigProvider>
  </Provider>
</IntlProvider>
`;
